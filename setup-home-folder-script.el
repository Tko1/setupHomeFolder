(require 'cl-lib)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Constants
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq +folders+
      '(:programming
	:web
	:lisp))

(setq +folder-names+
      '(:programming "~/programming"
		     :web  "~/programming/web"
		     :lisp "~/programming/lisp"))

(setq +folder-subfolders+
      '(:programming '("c" "cpp" "java" "python" "ruby")
		     :web '("php" "javascript" "django" "rails")
		     :lisp '("clojure" "elisp")))

(setq +home-folder-script-name+
      "tko_generate_home_script")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;Functions
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(defun list-of-paths (path subpaths)
  "list-of-paths
  Example: 
     (list-of-paths \"animals\" '(\"cat\" \"dog\" \"chicken\")
     ->
     (\"animals\" \"animals/cat|\" \"animals/dog\" \"animals/chicken\")
  "
  (cl-reduce
   ;;
   (lambda (sum x)
     (append sum `(,(concat path "/" x))))
   ;;
   subpaths :initial-value `(,path)))


;;TODO make subfolders optional
(defun mkdir  (folder subfolders)
  "mkdir
   Example:
  
  (mkdir \"animals\" '(\"cat\" \"dog\" \"chicken\"))
   ->
   \"mkdir animals/cat
    mkdir animals/dog
    mkdir animals/chicken\""
  (let*
      ;;Function to simply stack a list of strings
      ((stack
	(lambda (strings)
	  (cl-reduce (lambda (sum x) (concat sum "\n" x)) strings)))
       ;;A function to add prefix a to x   
       (prefix
	(lambda (a x) (concat a x)))
       ;;A function to prefix mkdir to x
       (prefix-with-mkdir
	(lambda (x) (funcall prefix "mkdir " x)))
       ;;All the file paths that will be mkdired
       (paths (mapcar
	       ;;Prefix them all with "mkdir "
	       prefix-with-mkdir
	       (list-of-paths folder subfolders))))
   (funcall stack paths)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;TODO make subfolders optional
;;     add it so that the new scripts are automatically chmod u+x  
(defun mkdir-to-file (filename folder &optional subfolders)
  "mkdir-to-file
   Example:

   (mkdir-to-file \"folder-name\" \"animals\" '(\"cat\" \"dog\"))
     ->
   A new file named folder-name.sh will be made in the directory
   you are in when you call this function.  It will contain the 
   following

   mkdir animals/cat
   mkdir animals/dog 
  "
  (let ((filename        (concat filename ".sh")))
    ;;Create buffer to write script in, or fetch it to modify
    (get-buffer-create filename)
    ;;Go to said buffer, insert text
    (with-current-buffer filename
      (insert (mkdir folder subfolders) "\n")
      ;;Save flie
      (write-file filename))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun tko-generate-home-folder-bash-script ()
  "Creates buffer, generates homefolder script current folder
  constants set on this page"
  (let ((retval ""))
    (dolist
	(x +folders+ retval)
      (setq retval
	    (concat
	     retval
	     (mkdir-to-file
	      +home-folder-script-name+
	      (plist-get +folder-names+ x)
	      (eval (plist-get +folder-subfolders+ x)))
	     "\n")))))
;;TODO finish this
(defun tko-run-home-folder-bash-script ()
  "Runs homefolder script generated by \"tko-generate-home-folder-bash-script\""
  (interactive)
  (call-process-shell-command (concat +home-folder-script-name+ ".sh")
			       nil
			       nil
			       nil))
   
   

(tko-generate-home-folder-bash-script)
;;TODO make sure the following function works
(tko-run-home-folder-bash-script)
